// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }
}

contract RealEstateVault is IBEP20 {
    using SafeMath for uint256;

    string public constant name = "REAL ESTATE VAULT";
    string public constant symbol = "RESTV";
    uint8 public constant decimals = 18;
    uint256 private _totalSupply = 1_000_000_000 * 10 ** uint256(decimals);
    uint256 private _totalBurned;
    uint256 private _maxBurnAmount = 900_000_000 * 10 ** uint256(decimals);
    uint256 private _maxSupplyLimit = 100_000_000 * 10 ** uint256(decimals);
    uint256 private _buyFeePercentage = 0; // Buy tax set to 0%
    uint256 private _sellFeePercentage = 1; // Sell tax set to 1%
    uint256 private _dividendPercentage = 3;
    uint256 private constant _dividendDuration = 12 * 30 days; // Dividend duration set to 12 months
    uint256 private _dividendLastPaid;
    uint256 private _totalDividendsDistributed;
    address private _owner;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    modifier onlyOwner() {
        require(msg.sender == _owner, "Only owner can call this function");
        _;
    }

    constructor() {
        _owner = msg.sender;
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) external view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external override returns (bool) {
        require(recipient != address(0), "BEP20: transfer to the zero address");
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) external view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external override returns (bool) {
        require(spender != address(0), "BEP20: approve to the zero address");
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "BEP20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        require(spender != address(0), "BEP20: approve to the zero address");
        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        require(spender != address(0), "BEP20: approve to the zero address");
        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "BEP20: decreased allowance below zero"));
        return true;
    }

    function distributeDividends() external {
        require(block.timestamp >= _dividendLastPaid.add(_dividendDuration), "Not eligible for dividend distribution yet");
        
        uint256 totalDividends = address(this).balance * _dividendPercentage / 100;
        _totalDividendsDistributed = _totalDividendsDistributed.add(totalDividends);
        _dividendLastPaid = block.timestamp;
        
        for (uint256 i = 0; i < _totalSupply; i++) {
            if (_balances[address(uint160(i))] > 0) {
                payable(address(uint160(i))).transfer(totalDividends * _balances[address(uint160(i))] / _totalSupply);
            }
        }
    }

    function withdrawDividends() external onlyOwner {
        payable(msg.sender).transfer(address(this).balance);
    }

    function renounceOwnership() external onlyOwner {
        _owner = address(0);
    }

    function _transfer(address sender, address recipient, uint256 amount) private {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");
        require(amount > 0, "BEP20: transfer amount must be greater than zero");
        require(_balances[sender] >= amount, "BEP20: transfer amount exceeds balance");

        
        uint256 sellFee = amount * _sellFeePercentage / 100;
        uint256 netAmount = amount - sellFee;

        if (sender == msg.sender) {
            require(netAmount > 0, "BEP20: net transfer amount must be greater than zero");
            require(_balances[sender] >= amount, "BEP20: transfer amount exceeds balance");
        }

        _balances[sender] = _balances[sender].sub(amount, "BEP20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(netAmount);
        _balances[address(this)] = _balances[address(this)].add(sellFee);

        emit Transfer(sender, recipient, netAmount);
        emit Transfer(sender, address(this), sellFee);
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}
