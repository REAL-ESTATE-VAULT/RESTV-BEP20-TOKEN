// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// SafeMath library definition
library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;
        return c;
    }
}

// Ownable contract definition
contract Ownable {
    // Ownership variables and events
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    // Constructor sets the deployer as the initial owner
    constructor() {
        _owner = msg.sender;
        emit OwnershipTransferred(address(0), _owner);
    }

    // Modifier to restrict functions to the owner only
    modifier onlyOwner() {
        require(msg.sender == _owner, "Ownable: caller is not the owner");
        _;
    }

    // Function to retrieve the current owner
    function owner() public view returns (address) {
        return _owner;
    }

    // Function to renounce ownership (onlyOwner modifier)
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    // Function to transfer ownership (onlyOwner modifier)
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    // Internal function to transfer ownership
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

// IBEP20 interface definition
interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// RealEstateVault contract definition
contract RealEstateVault is Ownable {
    using SafeMath for uint256; // Use SafeMath for uint256 arithmetic

    // Token details
    string public constant name = "Real Estate Vault";
    string public constant symbol = "RESTV";
    uint8 public constant decimals = 18;
    uint256 private _totalSupply = 10_000_000_000 * 10**uint256(decimals); // 10 Billion tokens

    // Dividend details
    uint256 public constant dividendPercentage = 3; // Monthly dividend percentage
    uint256 public constant dividendPeriod = 30 days * 18; // 18 months
    uint256 public dividendPool = _totalSupply * 40 / 100; // 40% of total supply for dividends
    address public dividendWallet = 0xaac83d8E716a0351ca290a65a51Cb888152257C3; // Designated wallet for dividends

    // Token balances and allowances
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => uint256) private _claimedDividends;

    // Events
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event DividendsClaimed(address indexed account, uint256 amount);

    // Constructor
    constructor() {
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    // BEP20 token functions

    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) external view returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
        return true;
    }

    // Internal transfer and allowance functions

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");
        require(_balances[sender] >= amount, "BEP20: transfer amount exceeds balance");

    
        _balances[sender] = _balances[sender].sub(amount);
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    // Dividend claim function

    function claimDividends() external returns (bool) {
        uint256 unclaimedDividends = calculateDividends(msg.sender);
        require(unclaimedDividends > 0, "No dividends to claim");
        
        
        _balances[dividendWallet] = _balances[dividendWallet].sub(unclaimedDividends);
        _balances[msg.sender] = _balances[msg.sender].add(unclaimedDividends);
        _claimedDividends[msg.sender] = block.timestamp;
        
        emit Transfer(dividendWallet, msg.sender, unclaimedDividends);
        emit DividendsClaimed(msg.sender, unclaimedDividends);
        
        return true;
    }

    // Dividend calculation function

    function calculateDividends(address account) public view returns (uint256) {
        uint256 lastClaimedTimestamp = _claimedDividends[account];
        if (lastClaimedTimestamp == 0) {
            lastClaimedTimestamp = block.timestamp;
        }
        uint256 timeSinceLastClaim = block.timestamp - lastClaimedTimestamp;
        uint256 dividendAmount = (_balances[account] * dividendPercentage * timeSinceLastClaim) / (dividendPeriod * 100);
        if (dividendAmount > dividendPool) {
            dividendAmount = dividendPool;
        }
        return dividendAmount;
    }
}
